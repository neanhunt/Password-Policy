<?php

/**
 * @file
 * Password Policy module installation and upgrade code.
 */

/**
 * Implements hook_schema().
 */
function password_policy_schema() {
  return array(
    'password_policy' => array(
      'description' => 'Stores password policies.',
      'fields' => array(
        'pid' => array(
          'description' => 'Primary Key: Unique password policy ID.',
          'type' => 'serial',
          'not null' => TRUE,
        ),
        'name' => array(
          'description' => 'The name of the policy.',
          'type' => 'varchar',
          'length' => 64,
          'not null' => TRUE,
          'default' => '',
        ),
        'description' => array(
          'description' => 'The description of the policy.',
          'type' => 'varchar',
          'length' => 255,
          'default' => '',
        ),
        'enabled' => array(
          'description' => 'Whether the policy is enabled.',
          'type' => 'int',
          'not null' => TRUE,
          'default' => 0,
          'size' => 'tiny',
        ),
        'constraints' => array(
          'description' => 'The policy\'s serialized constraints.',
          'type' => 'varchar',
          'length' => 1024,
          'not null' => TRUE,
          'default' => '',
          'serialize' => TRUE,
        ),
        'created' => array(
          'description' => 'Timestamp for when the policy was created.',
          'type' => 'int',
          'not null' => TRUE,
          'default' => 0,
        ),
        'expiration' => array(
          'description' => 'The passwords will expire after this number of days.',
          'type' => 'int',
          'default' => 0,
        ),
        'warning' => array(
          'description' => 'Comma separated list of days when warning is sent out.',
          'type' => 'varchar',
          'length' => 64,
        ),
        'weight' => array(
          'description' => 'Weight of the policy, used to order active policies.',
          'type' => 'int',
          'size' => 'tiny',
          'not null' => TRUE,
          'default' => 0,
        ),
      ),
      'primary key' => array('pid'),
      'unique keys' => array(
        'name' => array('name'),
      ),
    ),
    'password_policy_history' => array(
      'description' => 'Stores user\'s old password hashes.',
      'fields' => array(
        'pid' => array(
          'description' => 'Primary Key: Unique password policy users ID.',
          'type' => 'serial',
          'not null' => TRUE,
        ),
        'uid' => array(
          'description' => 'User\'s {users}.uid.',
          'type' => 'int',
          'not null' => TRUE,
        ),
        'pass' => array(
          'type' => 'varchar',
          'length' => 128,
          'not null' => TRUE,
          'default' => '',
          'description' => 'User\'s password (hashed).',
        ),
        'created' => array(
          'description' => 'Timestamp for when the policy was created.',
          'type' => 'int',
          'not null' => TRUE,
        ),
      ),
      'foreign keys' => array(
        'password_policy' => array(
          'table' => 'password_policy',
          'columns' => array('pid' => 'pid'),
        ),
        'user' => array(
          'table' => 'users',
          'columns' => array('uid' => 'uid'),
        ),
      ),
      'indexes' => array('uid' => array('uid')),
      'primary key' => array('pid'),
    ),
    'password_policy_expiration' => array(
      'description' => 'Stores users password expiration data.',
      'fields' => array(
        'pid' => array(
          'description' => 'Primary Key: Unique password policy expirations ID.',
          'type' => 'serial',
          'not null' => TRUE,
        ),
        'uid' => array(
          'description' => 'User\'s {users}.uid.',
          'type' => 'int',
          'not null' => TRUE,
          'default' => 0,
        ),
        'warning' => array(
          'description' => 'Timestamp for when the warning was shown.',
          'type' => 'int',
        ),
        'blocked' => array(
          'description' => 'Timestamp for when the user was blocked.',
          'type' => 'int',
        ),
        'unblocked' => array(
          'description' => 'Timestamp for when the user was unblocked.',
          'type' => 'int',
        ),
      ),
      'primary key' => array('pid'),
      'foreign keys' => array(
        'password_policy' => array(
          'table' => 'password_policy',
          'columns' => array('pid' => 'pid'),
        ),
        'role' => array(
          'table' => 'role',
          'columns' => array('rid' => 'rid'),
        ),
      ),
      'indexes' => array('uid' => array('uid')),
    ),
    'password_policy_force_change' => array(
      'description' => 'Forced password reset status.',
      'fields' => array(
        'uid' => array(
          'type' => 'int',
          'not null' => TRUE,
        ),
        'force_change' => array(
          'type' => 'int',
          'default' => 0,
        ),
      ),
      'foreign keys' => array(
        'user' => array(
          'table' => 'users',
          'columns' => array('uid' => 'uid'),
        ),
      ),
      'indexes' => array('uid' => array('uid')),
      'primary key' => array('uid'),
    ),
    'password_policy_role' => array(
      'description' => 'Links policies with roles.',
      'fields' => array(
        'pid' => array(
          'description' => 'Policy ID.',
          'type' => 'int',
          'not null' => TRUE,
          'default' => 0,
        ),
        'rid' => array(
          'description' => 'Role ID.',
          'type' => 'int',
          'not null' => TRUE,
          'default' => 0,
        ),
      ),
      'foreign keys' => array(
        'password_policy' => array(
          'table' => 'password_policy',
          'columns' => array('pid' => 'pid'),
        ),
        'role' => array(
          'table' => 'role',
          'columns' => array('rid' => 'rid'),
        ),
      ),
      'primary key' => array('rid', 'pid'),
    ),
    'password_policy_excluded_authentication_modules' => array(
      'description' => 'Authentication modules to be excluded from specified policies.',
      'fields' => array(
        'pid' => array(
          'description' => 'Policy ID.',
          'type' => 'int',
          'not null' => TRUE,
          'default' => 0,
        ),
        'module' => array(
          'description' => 'Module.',
          'type' => 'varchar',
          'length' => 128,
          'not null' => TRUE,
          'default' => '',
        ),
      ),
      'foreign keys' => array(
        'password_policy' => array(
          'table' => 'password_policy',
          'columns' => array('pid' => 'pid'),
        ),
        'module' => array(
          'table' => 'authmap',
          'columns' => array('module' => 'module'),
        ),
      ),
      'primary key' => array('module', 'pid'),
    ),
  );
}

/**
 * Implements hook_enable().
 */
function password_policy_enable() {
  backdrop_set_message(t('Password policy module successfully installed. Please review the available <a href="@settings">configuration settings</a>.', array('@settings' => url('admin/config/people/password_policy'))));
}

/**
 * Implements hook_install().
 */
function password_policy_install() {
  $query = db_select('users', 'u')
    ->fields('u', array('uid'))
    ->distinct()
    ->condition('u.uid', 0, '>');
  db_insert('password_policy_force_change')
    ->fields(array('uid'))
    ->from($query)
    ->execute();
  // Dynamically generated variable data was detected on the following lines.
  // /password_policy/password_policy.module line 949
}

/**
 * Implements hook_uninstall().
 */
function password_policy_uninstall() {
  config_clear('password_policy.settings', 'password_policy_admin');
  config_clear('password_policy.settings', 'password_policy_begin');
  config_clear('password_policy.settings', 'password_policy_block');
  config_clear('password_policy.settings', 'password_policy_show_restrictions');
  config_clear('password_policy.settings', 'password_policy_warning_subject');
  config_clear('password_policy.settings', 'password_policy_warning_body');
  config_clear('password_policy.settings', 'password_policy_new_login_change');
  config_clear('password_policy.settings', 'password_policy_force_change_reset');
  config_clear('password_policy.settings', 'password_policy_force_change_by_mail');
  config_clear('password_policy.settings', 'password_policy_force_change_path');
  config_clear('password_policy.settings', 'password_policy_force_change_extra_allowed_paths');
  config_clear('password_policy.settings', 'password_policy_expired_account_entries');
}

// TODO The old hook_update_N functions cannot be applied to Backdrop.

function password_policy_update_7000() { }

/**
 * The implementation of password_policy_update_7001() has been removed.
 *
 * Do not re-implement it. hook_update_N() functions should not be renumbered.
 */

/**
 * The implementation of password_policy_update_7002() has been removed.
 *
 * Do not re-implement it. hook_update_N() functions should not be renumbered.
 */

// TODO The old hook_update_N functions cannot be applied to Backdrop.

function password_policy_update_7100() { }

// TODO The old hook_update_N functions cannot be applied to Backdrop.

function password_policy_update_7101() { }

// TODO The old hook_update_N functions cannot be applied to Backdrop.

function password_policy_update_7102(&$sandbox) { }

// TODO The old hook_update_N functions cannot be applied to Backdrop.

function password_policy_update_7103() { }

/**
 * Converts tokens in a Password Policy string variable to Backdrop 7 format.
 *
 * @param string $variable
 *   Variable name.
 */
function _password_policy_convert_variable_tokens_d6_to_d7($variable) {
  // TODO This variable was probably removed in Backdrop without replacement.

  $value = variable_get($variable, FALSE);
  if ($value) {
    $value = _password_policy_replace_d6_with_d7_tokens($value);
    // TODO This variable was probably removed in Backdrop without replacement.

    variable_set($variable, $value);
  }
}

/**
 * Replaces D6 tokens in a Password Policy string with D7 tokens.
 */
function _password_policy_replace_d6_with_d7_tokens($subject) {
  $d6_to_d7_tokens = _password_policy_get_d6_to_d7_tokens_mapping();
  $d6_tokens = array_keys($d6_to_d7_tokens);
  $d7_tokens = array_values($d6_to_d7_tokens);
  return str_replace($d6_tokens, $d7_tokens, $subject);
}

/**
 * Gets D6-to-D7 mapping for tokens used by the Password Policy module.
 *
 * @see user_update_7017()
 */
function _password_policy_get_d6_to_d7_tokens_mapping() {
  // D6-to-D7 mapping for tokens that are used by User module e-mails. Copied


  // from user_update_7017().


  $user_email_tokens = array(
    '!site' => '[site:name]',
    '!username' => '[user:name]',
    '!mailto' => '[user:mail]',
    '!login_uri' => '[site:login-url]',
    '!uri_brief' => '[site:url-brief]',
    '!login_url' => '[user:one-time-login-url]',
    '!uri' => '[site:url]',
    '!date' => '[date:medium]',
    '!password' => '',
  );
  // D6-to-D7 mapping for Password Policy tokens.


  $password_policy_email_tokens = array(
    '!days_left' => '[password-policy:days-left]',
    '!edit_uri' => '[password-policy:password-edit-url]',
  );
  // Combined D6-to-D7 mapping for tokens.


  $tokens = array_merge($user_email_tokens, $password_policy_email_tokens);
  return $tokens;
}

// TODO The old hook_update_N functions cannot be applied to Backdrop.

function password_policy_update_7104() { }

// TODO The old hook_update_N functions cannot be applied to Backdrop.

function password_policy_update_7106() { }

// TODO The old hook_update_N functions cannot be applied to Backdrop.

function password_policy_update_7107() { }

// TODO The old hook_update_N functions cannot be applied to Backdrop.

function password_policy_update_7108() { }

// TODO The old hook_update_N functions cannot be applied to Backdrop.

function password_policy_update_7109() { }

// TODO The old hook_update_N functions cannot be applied to Backdrop.

function password_policy_update_7110() { }

/**
 * Implements hook_update_last_removed().
 */
function password_policy_update_last_removed() {
  return 7110;
}

/**
 * Migrate password_policy variables to config.
 */
function password_policy_update_1000() {
  $config = config('password_policy.settings');
  $config->set('password_policy_force_change_reset', update_variable_get('password_policy_force_change_reset', '0'));
  $config->set('password_policy_force_change_path', update_variable_get('password_policy_force_change_path', 'NULL'));
  $config->set('password_policy_force_change_extra_allowed_paths', update_variable_get('password_policy_force_change_extra_allowed_paths', 'dynamic value in file /password_policy/password_policy.module line 949'));
  $config->set('password_policy_admin', update_variable_get('password_policy_admin', '1'));
  $config->set('password_policy_begin', update_variable_get('password_policy_begin', '0'));
  $config->set('password_policy_block', update_variable_get('password_policy_block', '0'));
  $config->set('password_policy_expired_account_entries', update_variable_get('password_policy_expired_account_entries', '10'));
  $config->set('password_policy_show_restrictions', update_variable_get('password_policy_show_restrictions', '0'));
  $config->set('password_policy_warning_subject', update_variable_get('password_policy_warning_subject', 'PASSWORD_POLICY_DEFAULT_WARNING_SUBJECT'));
  $config->set('password_policy_warning_body', update_variable_get('password_policy_warning_body', 'PASSWORD_POLICY_DEFAULT_WARNING_BODY'));
  $config->set('password_policy_new_login_change', update_variable_get('password_policy_new_login_change', '0'));
  $config->set('password_policy_test_clock_offset', update_variable_get('password_policy_test_clock_offset', '0'));
  $config->save();

  update_variable_del('password_policy_force_change_reset');
  update_variable_del('password_policy_force_change_path');
  update_variable_del('password_policy_force_change_extra_allowed_paths');
  update_variable_del('password_policy_admin');
  update_variable_del('password_policy_begin');
  update_variable_del('password_policy_block');
  update_variable_del('password_policy_expired_account_entries');
  update_variable_del('password_policy_show_restrictions');
  update_variable_del('password_policy_warning_subject');
  update_variable_del('password_policy_warning_body');
  update_variable_del('password_policy_new_login_change');
  update_variable_del('password_policy_test_clock_offset');
}
